# Production configuration
server.port=${PORT:8080}

# Default to PostgreSQL in production unless overridden
utility.database.type=${DATABASE_TYPE:postgresql}

# PostgreSQL Database Configuration
# Render -> Database Instance -> Connections -> External Database URL
spring.datasource.url=jdbc:postgresql://utilityuser:EbcqfzY4CTEXARchQ7h72KfYXUaKOayd@dpg-d41p87ripnbc738ntno0-a.singapore-postgres.render.com/utilitydb_d3w7
spring.datasource.username=utilityuser
spring.datasource.password=EbcqfzY4CTEXARchQ7h72KfYXUaKOayd

# Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
# idle timeout 5 minutes
spring.datasource.hikari.idle-timeout=300000
 # connection timeout -> 20 seconds
spring.datasource.hikari.connection-timeout=20000
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Schema Initialization
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.continue-on-error=true

# Enable response compression
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,text/css,application/javascript

# Set the character encoding
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# Security headers
server.tomcat.relaxed-query-chars=|,{,},[,]
security.headers.frame-options=DENY
security.headers.xss-protection=1; mode=block
security.headers.content-type-options=nosniff

# --- JWT (required in prod) ---
# These are intentionally sourced from environment variables so secrets are not committed.
# Set on Render:
#   APP_JWT_SECRET       -> app.jwt.secret (min 32+ chars for HS256)
#   APP_JWT_EXPIRATION   -> app.jwt.expiration (milliseconds, e.g., 86400000 for 24h)
app.jwt.secret=${APP_JWT_SECRET}
app.jwt.expiration=${APP_JWT_EXPIRATION:86400000}

# --- Caching (Caffeine) ---
spring.cache.type=caffeine
# Max 1000 entries, 60s TTL, record stats for troubleshooting
spring.cache.caffeine.spec=maximumSize=1000,expireAfterWrite=6h,recordStats

# --- Actuator exposure for cache/metrics troubleshooting ---
management.endpoints.web.exposure.include=health,info,metrics,caches
# Spring Boot 3.5+: use 'access' to control endpoint read/write
management.endpoint.caches.access=read-only
management.endpoint.metrics.access=read-only
management.endpoints.web.base-path=/api/actuator

# --- Mail configuration (SMTP) â€” Option B defaults (STARTTLS on 587) ---
# Override via env vars as needed in your deployment environment.
spring.mail.host=${SPRING_MAIL_HOST:smtp.hostinger.com}
spring.mail.port=${SPRING_MAIL_PORT:587}
spring.mail.username=${SPRING_MAIL_USERNAME:}
spring.mail.password=${SPRING_MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=${SPRING_MAIL_SMTP_STARTTLS_ENABLE:true}
spring.mail.properties.mail.smtp.starttls.required=${SPRING_MAIL_SMTP_STARTTLS_REQUIRED:true}
spring.mail.properties.mail.smtp.ssl.enable=${SPRING_MAIL_SMTP_SSL_ENABLE:false}
spring.mail.properties.mail.smtp.ssl.protocols=${SPRING_MAIL_SMTP_SSL_PROTOCOLS:TLSv1.2}
spring.mail.properties.mail.smtp.ssl.trust=${SPRING_MAIL_SMTP_SSL_TRUST:smtp.hostinger.com}
spring.mail.properties.mail.smtp.connectiontimeout=${SPRING_MAIL_SMTP_CONNECTION_TIMEOUT:5000}
spring.mail.properties.mail.smtp.timeout=${SPRING_MAIL_SMTP_READ_TIMEOUT:15000}
spring.mail.properties.mail.smtp.writetimeout=${SPRING_MAIL_SMTP_WRITE_TIMEOUT:15000}
spring.mail.properties.mail.debug=${SPRING_MAIL_DEBUG:false}
spring.mail.test-connection=${SPRING_MAIL_TEST_CONNECTION:false}
